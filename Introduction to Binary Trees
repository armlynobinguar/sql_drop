root = 5
leaves = [1, 6, 10]
internal = [3, 9, 8]

class Node:
    
    def __init__(self, value):
        self.value = value
        self.left_child = None
        self.right_child = None

# Create the nodes
node_5 = Node(5)
node_3 = Node(3)
node_9 = Node(9)
node_1 = Node(1)
node_8 = Node(8)
node_6 = Node(6)
node_10 = Node(10)

# Create children references
node_5.left_child = node_3
node_5.right_child = node_9

node_3.left_child = node_1

node_9.left_child = node_8
node_9.right_child = node_10

node_8.left_child = node_6

class BST:
    
    def __init__(self):
        self.root = None

class BST:
    
    def __init__(self):
        self.root = None
        
    def add(self, value):
        if self.root is None:
            # The root does exist yet, create it
            self.root = Node(value)
        else:
            # Find the right place and insert new value
            self.add_recursive(self.root, value)
            
    # Define and implement the add_recursive() method here
# Answer
class BST:
    
    def __init__(self):
        self.root = None
        
    def add(self, value):
        if self.root is None:
            # The root does exist yet, create it
            self.root = Node(value)
        else:
            # Find the right place and insert new value
            self.add_recursive(self.root, value)
            
    def add_recursive(self, current_node, value):
        if value <= current_node.value:
            # Go to the left
            if current_node.left_child is None:
                current_node.left_child = Node(value)
            else:
                self.add_recursive(current_node.left_child, value)
        else:
            # Go to the right
            if current_node.right_child is None:
                current_node.right_child = Node(value)
            else:
                self.add_recursive(current_node.right_child, value)
