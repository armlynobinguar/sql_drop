import sqlite3
import pandas as pd
conn = sqlite3.connect('moma.db')
moma_iter = pd.read_csv('moma.csv', chunksize=1000)
for chunk in moma_iter:
    chunk.to_sql("exhibitions", conn, if_exists='append', index=False)

results_df = pd.read_sql('PRAGMA table_info(exhibitions);', conn)
print(results_df)

moma_iter = pd.read_csv('moma.csv', chunksize=1000)
for chunk in moma_iter:
    chunk['ExhibitionSortOrder'] = chunk['ExhibitionSortOrder'].astype('int16')
    chunk.to_sql("exhibitions", conn, if_exists='append', index=False)
results_df = pd.read_sql('PRAGMA table_info(exhibitions);', conn)
print(results_df)

q = 'select exhibitionid, count(*) as counts from exhibitions group by exhibitionid order by counts desc;'
eid_counts = pd.read_sql(q, conn)
print(eid_counts[:10])

q = 'select exhibitionid from exhibitions;'
eid_df = pd.read_sql(q, conn)
eid_pandas_counts = eid_df['ExhibitionID'].value_counts()
print(eid_pandas_counts[:10])

cur_time = 0
num_processes_done = 0
wait_queue = Queue()
cur_pid = None

# Copy and paste tempalte code here
while num_processes_done < processes.shape[0]:
    # Check if current process finished
    if cur_pid is not None:
        if processes.loc[cur_pid, "Start"] + processes.loc[cur_pid, "Duration"] == cur_time:
            # Step 1 code goes here
            processes.loc[cur_pid, "End"] = cur_time
            cur_pid = None
            num_processes_done += 1
    # Handle arriving processes
    # Step 2 code goes here
    ready_processes = processes[processes["Arrival"] == cur_time]
    for pid, _ in ready_processes.iterrows():
        wait_queue.enqueue(pid)
    # Assign a process to the processor
    if cur_pid is None and len(wait_queue) > 0:
        # Step 3 code goes here
        cur_pid = wait_queue.dequeue()
        processes.loc[cur_pid, "Start"] = cur_time 
    cur_time += 1
    
print(processes.head())

processes["Wait"] = processes["Start"] - processes["Arrival"]
average_wait_time = processes["Wait"].mean()
processes["Turnaround"] = processes["End"] - processes["Arrival"]
average_turnaround_time = processes["Turnaround"].mean()

class Stack(LinkedList):
    pass

stack = Stack()
print(stack.length)

class Stack(LinkedList):
    pass

stack = Stack()
print(stack.length)

class Stack(LinkedList):
    pass
# Answer

class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

stack = Stack()
for i in [1, 2, 3]:
    stack.push(i)

print(stack)


class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

    # Add peek() method here
# Answer
class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

    # Add peek() method here
    def peek(self):
        return self.tail.data
        
stack = Stack()
for i in [1, 2, 3]:
    stack.push(i)
    
print(stack.peek())

class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

    # Add peek() method here
# Answer
class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

    # Add peek() method here
    def peek(self):
        return self.tail.data
        
stack = Stack()
for i in [1, 2, 3]:
    stack.push(i)
    
print(stack.peek())


class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

    def peek(self):
        return self.tail.data

    # Add pop() method here
# Answer
class Stack(LinkedList):
    
    def push(self, data):
        self.append(data)

    def peek(self):
        return self.tail.data

    # Add pop() method here
    def pop(self):
        ret = self.tail.data
        if self.length == 1:
            self.tail = self.head = None
        else:
            self.tail = self.tail.prev
            self.tail.next = None
        self.length -= 1
        return ret

stack = Stack()
for i in [1, 2, 3]:
    stack.push(i)
top = stack.pop()
print(stack.peek())
