fruits = ["apple", "orange", "pear", "fig", "passionfruit"]
def list_len(lst):
    if not lst:
        return 0
    return 1 + list_len(lst[1:])

num_fruits = list_len(fruits)

fruits = ["apple", "orange", "pear", "fig", "passionfruit"]

def list_len(lst):
    if not lst:
        return 0
    return 1 + list_len(lst[1:])
# Answer
def list_len(lst):
    return 1 + list_len(lst[1:])

list_len(fruits)

def solve_hanoi(num_disks, first_peg, middle_peg, last_peg):
    if num_disks == 1:
        # Base case
        print("Move the top disk from peg {} to peg {}.".format(first_peg, last_peg))
    else:
        # General Case
        # Instruction 1: Add code to solve the first subproblem
        
        # Second subproblem: Move disk num_disks from first_peg to last_peg
        solve_hanoi(1, first_peg, middle_peg, last_peg)
        
        # Instruction 2: Add code to solve the third subproblem
# Answer
def solve_hanoi(num_disks, first_peg, middle_peg, last_peg):
    if num_disks == 1:
        # Base case
        print("Move the top disk from peg {} to peg {}.".format(first_peg, last_peg))
    else:
        # General Case
        solve_hanoi(num_disks - 1, first_peg, last_peg, middle_peg)
        solve_hanoi(1, first_peg, middle_peg, last_peg)
        solve_hanoi(num_disks - 1, middle_peg, first_peg, last_peg)

solve_hanoi(3, 'A', 'B', 'C')

import os
def list_files(current_path):
    #Base case
    if not os.path.isdir(current_path):
        print(current_path)
    else:
        # General case
        for name in os.listdir(current_path):
            file_path = os.path.join(current_path, name)
            list_files(file_path)
            
list_files("folder1")

"""
Our implementation doesn't use the list.pop() method because
this method is O(n), not O(1). Instead we keep track of the 
index of the front element of each list to simulate removing
elements.
"""
def merge_sorted_lists(list1, list2):
    index1 = 0
    index2 = 0
    merged_list = []
    # Collect the font value while both lists are not empty
    while index1 < len(list1) and index2 < len(list2):
        if list1[index1] < list2[index2]:
            merged_list.append(list1[index1])
            index1 += 1
        else:
            merged_list.append(list2[index2])
            index2 += 1
    # Add remaining values
    merged_list += list1[index1:]
    merged_list += list2[index2:]
    return merged_list
    
            
merged_lists = merge_sorted_lists([1, 2, 3, 4], [5, 6, 7, 8])
print(merged_lists)

"""
import random
with open("./tests/merge_sort.in", "w") as f_in, open("./tests/merge_sort.out", "w") as f_out:
    for size in range(25):
        values = [random.randint(1, 100) for _ in range(size)]
        f_in.write("[{}]\n".format(values))
        f_out.write("{}\n".format(sorted(values)))
"""

def merge_sort(values):
    # Base case
    if len(values) < 2:
        return values
    # General case
    midpoint = len(values) // 2
    sorted_first_half = merge_sort(values[:midpoint])
    sorted_second_half = merge_sort(values[midpoint:])
    return merge_sorted_lists(sorted_first_half, sorted_second_half)

sorted_values = merge_sort([2, 4, 7, 8, 1, 3, 5, 6])
print(sorted_values)
