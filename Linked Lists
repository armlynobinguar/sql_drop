class Book:
    
    def __init__(self, name, num_pages):
        self.name = name
        self.num_pages = num_pages
    
book = Book("Lord of the Flies", 228)

class Node:
    
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
        
node = Node(42)

class Node:
    
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
        
node = Node(42)

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

lst = LinkedList()

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    # Implement append() method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    # Implement append() method here
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1

# Test implementation
lst = LinkedList()

lst.append(10)
print(lst.length, lst.head.data, lst.tail.data)

lst.append(11)
print(lst.length, lst.head.data, lst.tail.data)

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    # Implement __iter__() method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    # Implement __iter__() method here
    def __iter__(self):
        self._iter_node = self.head
        return self

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self
    
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        # Rest of the implementation goes here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self
    
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        # Rest of the implementation goes here
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
# Testing the implementation
lst = LinkedList()
lst.append(5)
lst.append(3)
lst.append(8)
for value in lst:
    print(value)

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self 
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
    # Add method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self 
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
    # Add method here
    def prepend(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
        self.length += 1

# Test implementation
lst = LinkedList()

lst.prepend(10)
print(lst.length, lst.head.data, lst.tail.data)

lst.prepend(11)
print(lst.length, lst.head.data, lst.tail.data)

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self 
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
    def prepend(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
        self.length += 1
        
    # Add __len__() method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self 
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
    def prepend(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
        self.length += 1
        
    # Add __len__() method here
    def __len__(self):
        return self.length

# Test implementation
lst = LinkedList()
lst.prepend(10)
print(len(lst))

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self 
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
    def prepend(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
        self.length += 1
        
    def __len__(self):
        return self.length
    
    # Add __str__() method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    def __iter__(self):
        self._iter_node = self.head
        return self 
    
    def __next__(self):
        if self._iter_node is None:
            raise StopIteration
        ret = self._iter_node.data
        self._iter_node = self._iter_node.next
        return ret
    
    def prepend(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node
        self.length += 1
        
    def __len__(self):
        return self.length
    
    # Add __str__() method here
    def __str__(self):
        return str([value for value in self])

# Test implementation
lst = LinkedList()
print(lst)

lst.append(1)
print(lst)

lst.append(2)
print(lst)

class Queue(LinkedList):
    pass

queue = Queue()
print(queue.length)

class Queue(LinkedList):
    pass

queue = Queue()
print(queue.length)

class Queue(LinkedList):
    pass
# Answer

class Queue(LinkedList):
    
    def enqueue(self, data):
        self.prepend(data)

queue = Queue()
for i in [1, 2, 3]:
    queue.enqueue(i)
    
print(queue)

class Queue(LinkedList):
    
    def enqueue(self, data):
        self.prepend(data)
        
    # Add get_front() method here
# Answer
class Queue(LinkedList):
    
    def enqueue(self, data):
        self.prepend(data)
        
    # Add get_front() method here
    def get_front(self):
        return self.tail.data

queue = Queue()
for i in [1, 2, 3]:
    queue.enqueue(i)
    
print(queue.get_front())
