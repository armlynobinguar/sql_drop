class Book:
    
    def __init__(self, name, num_pages):
        self.name = name
        self.num_pages = num_pages
    
book = Book("Lord of the Flies", 228)

class Node:
    
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
        
node = Node(42)

class Node:
    
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None
        
node = Node(42)

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

lst = LinkedList()

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    # Implement append() method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    # Implement append() method here
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1

# Test implementation
lst = LinkedList()

lst.append(10)
print(lst.length, lst.head.data, lst.tail.data)

lst.append(11)
print(lst.length, lst.head.data, lst.tail.data)

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    # Implement __iter__() method here
# Answer

class LinkedList:
    
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0
        
    def append(self, data):
        new_node = Node(data)
        if self.length == 0:
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.length += 1
        
    # Implement __iter__() method here
    def __iter__(self):
        self._iter_node = self.head
        return self
